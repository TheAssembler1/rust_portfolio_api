use actix_web::{get, post, App, HttpResponse, HttpServer, Responder, web};
use dotenv::dotenv;
use serde::{Deserialize, Serialize};

#[derive(Deserialize)]
struct ConnConfig {
    port: u16,
    ip: String,
}

#[get("/")]
async fn check_health() -> impl Responder {
    HttpResponse::Ok().finish()
}

#[derive(Deserialize)]
struct Test {
    message: String,
}

#[derive(Serialize)]
struct GetTest {
    id: String,
    message: String,
}

#[post("/test")]
async fn test_post(json: web::Json<Test>) -> impl Responder {
    println!("{}", json.message);
    HttpResponse::Ok().finish()
}

#[get("/test/{test_id}")]
async fn get_test(path: web::Path<String>) -> impl Responder {
    let test_id = path.into_inner();
    let result = GetTest {
        id: String::from(test_id),
        message: String::from("testMessage"),
    };

    Ok(web::Json::<GetTest>::(result))
}

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    dotenv().ok();

    let config = match envy::prefixed("SERVER_").from_env::<ConnConfig>() {
        Ok(config) => config,
        Err(error) => panic!("{:#?}", error),
    };

    println!("Server listening at http://{}:{}", config.ip, config.port);
    
    HttpServer::new(|| App::new()
        .service(check_health)
        .service(test_post)
        .service(get_test))
        .bind((config.ip, config.port))?
        .run()
        .await
}
